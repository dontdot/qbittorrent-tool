name: Build Multi-Platform Releases

on:
  push:
    branches: [ py ]
    tags:
      - 'v*'
  pull_request:
    branches: [ py ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install build dependencies
      run: |
        pip install pyinstaller

    - name: Build executable with Makefile
      run: |
        make windows-amd64

    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-executable
        path: |
          release/qbittorrent-tool-windows-amd64.exe
          release/example.config.json

  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Install build dependencies
      run: |
        pip install pyinstaller

    - name: Build executable with Makefile
      run: |
        make linux-amd64

    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-executable
        path: |
          release/qbittorrent-tool-linux-amd64
          release/example.config.json

  build-macos-intel:
    runs-on: macos-13  # Intel mac
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Install build dependencies
      run: |
        pip install pyinstaller

    - name: Build executable with Makefile
      run: |
        make darwin-amd64

    - name: Upload macOS Intel artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-intel-executable
        path: |
          release/qbittorrent-tool-darwin-amd64
          release/example.config.json

  build-macos-arm:
    runs-on: macos-14  # Apple Silicon mac
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Install build dependencies
      run: |
        pip install pyinstaller

    - name: Build executable with Makefile
      run: |
        make darwin-arm64

    - name: Upload macOS ARM artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-arm-executable
        path: |
          release/qbittorrent-tool-darwin-arm64
          release/example.config.json

  create-release:
    needs: [build-windows, build-linux, build-macos-intel, build-macos-arm]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts
        
    - name: Display structure of downloaded files
      run: ls -R release-artifacts
      
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        
    - name: Upload Windows Release Asset
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-artifacts/windows-executable/qbittorrent-tool-windows-amd64.exe
        asset_name: qbittorrent-tool-windows-amd64.exe
        asset_content_type: application/octet-stream
        
    - name: Upload Linux Release Asset
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-artifacts/linux-executable/qbittorrent-tool-linux-amd64
        asset_name: qbittorrent-tool-linux-amd64
        asset_content_type: application/octet-stream
        
    - name: Upload macOS Intel Release Asset
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-artifacts/macos-intel-executable/qbittorrent-tool-darwin-amd64
        asset_name: qbittorrent-tool-darwin-amd64
        asset_content_type: application/octet-stream
        
    - name: Upload macOS ARM Release Asset
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-artifacts/macos-arm-executable/qbittorrent-tool-darwin-arm64
        asset_name: qbittorrent-tool-darwin-arm64
        asset_content_type: application/octet-stream